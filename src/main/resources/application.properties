spring.application.name=Users-ws
server.port=${PORT:0}
eureka.client.service-url.defaultZone=http://localhost:8010/eureka
spring.devtools.restart.enabled=true
eureka.renewalPercentThreshold=0.85

# Instance ID that identifies a running instance of the app, using the value from terminal if provided
eureka.instance.instance-id=${spring.application.name}:${spring.application.instance_id:${random.value}}
# use the below command to add your instance id and port of choice
#mvn spring-boot:run -Dspring-boot.run.arguments="--spring.application.instance_id=ashuboi2, --server.port:8999"

spring.h2.console.enabled=true
spring.h2.console.settings.web-allow-others=true

spring.datasource.url=jdbc:h2:mem:userdb
spring.datasource.driver-class-name=org.h2.Driver
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

#gateway.ip=192.168.1.8
#token.expiration_time=36000
#login.url.path =/users/login
#token.secret=dgjorufhrsnjdu438fkdj38fdmcv7dm3ckvhrsnjjuwelueivhe848fhedldh5ndk


# this bootstrap.properties will be loaded before the application properties file is loaded and it will be loaded
# even before java beans are created during the application startup (we need to add spring-cloud-starter-config&bootstrap in pom.xml)
# so that our application could connect to spring cloud config server and fetch the properties for beans to fetch properties from config file
#
## In newer version we can skip creating bootstrap.properties and simply add the following property to the application.property file
# You wont need spring-cloud-starter-bootstrap if youre using the above line of code
#
#  spring.config.import=optional:configserver:http://localhost:8888
#  where localhost:8012 is a domain and port on which Config Server is running
#
# spring.cloud.config.uri=http://localhost:8888
# spring.cloud.config.name=PhotoAppApiConfigServer
spring.config.import=configserver:http://localhost:8012